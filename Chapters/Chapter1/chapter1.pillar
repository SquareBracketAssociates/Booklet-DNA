!! Introduction

BioSmalltalk is a software library for doing Bioinformatics with the Smalltalk programming system. Smalltalk is one of the very few pure object-technologies, a technology which has evolved since 1972, more than 45 years ago! and still alive and active today. Smalltalk has been influenced by biology since its conception in 1966 by Alan Kay, and the very nature of working with Smalltalk today resembles communicating with a living organism built by objects, in a cell-object metaphor. But it is actually more than a container of objects. Is the experience cycle you build around your work which enables your own evolution with a system. That could explain why Smalltalk has been the choice for many important developments in Computer Science: If every programming system has its own culture, then Smalltalk has its own place in innovation serving as a home environment for the Model-View-Controller framework, Generational Garbage Collection, JIT compilation, Unit Testing, Refactorings, Computational Reflection, Traits, etc.

Now Smalltalk is also a family of implementations. It includes developer tools still missing in many trending languages today, a very loyal community, an ecosystem of libraries for high productivity, still preserving the essence and beauty of its relflective object model. Quick fact-check: It has been voted as the *second most loved programming language>https://insights.stackoverflow.com/survey/2017#technology-most-loved-dreaded-and-wanted-languages* in the StackOverflow developer survey in 2017!

The goal of this booklet is to be useful for bioinformaticians, biologists, or life scientists, with little or no experience at all in programming or object technology. It will explain everything needed to understand how to use BioSmalltalk to reach your objectives, and also contains the specific context and vocabulary to communicate properly in communities if you need help. Object-Oriented Programming concepts are not required for basic tasks (like building sequences, parsing files, and exploring results) but are specially necessary to build more complex objects and/or debugging code, for example.

!!! Notes and Disclaimers

BioSmalltalk is free of charge and far from perfect. The developer does not provide any guarantees for quality, availability, or fitness for particular purpose. BioSmalltalk is licensed with the MIT License.

If you feel that you can contribute to ""BioSmalltalk"" development, please do not hesitate to contact through the available communities.

!!! Communities

- BioSmalltalk mailing-list for Users: *https://groups.google.com/forum/?hl=es#!forum/biosmalltalk-users*
- StackOverflow : *https://stackoverflow.com/questions/tagged/smalltalk*
- Pharo Discord channel: *http://discord.gg/Sj2rhxn*
- Pharo mailing-list: *http://lists.pharo.org/mailman/listinfo/pharo-users_lists.pharo.org*

!!! Installation

You can download the latest release of BioSmalltalk at *http://biosmalltalk.github.io/web/*
BioSmalltalk is currently implemented in *Pharo>http://pharo.org/*, a Smalltalk dialect. It is distributed in several forms depending of the target platform:

- For Microsoft Windows as a .exe installer.
- For Mac/OS X as a compressed ZIP file.
- For GNU/Linux as a compressed .tgz file.

Once installed, all distributions contains:

- A virtual image file (.image extension)
- A changes file (.changes extension)
- The Smalltalk Virtual Machine (VM) (executable file)
- A group of folders including examples and test data.

The usual way to run BioSmalltalk is to open the "Environment", a run-time Integrated Developement Environment (IDE) where all coding activities are performed. This means launching the VM and selecting a virtual image. At first you will have just one image - the one you downloaded in the BioSmalltalk distribution - but as you gain more experience with Smalltalk you will find having several images for different purposes.

You may also work by executing scripts from .st files (explained in the Executing Scripts section) however you would miss powerful Smalltalk tools like Browsers, Refactoring Tools, Code Critics, Finders, etc.