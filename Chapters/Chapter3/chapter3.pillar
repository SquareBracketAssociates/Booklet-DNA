!! Bioinformatics with BioSmalltalk
@cha:biosmalltalk

Developing and using Object-Oriented technology in BioSmalltalk is about finding your objects of interest in the (virtual) image. Think about the virtual image, or simply the image, as a snapshot of the system current state. 

If you want to experiment with sequences, your first task is then to find classes related to sequences (hint: Search for ""BioSequence"" in the Browser). Once found, you can easily select methods and explore the senders to check how they are used. You will see some methods require a minimum instantiation effort, like a reverse complement, some others will require you to set up a whole context of many objects to figure out how to use them. 
 
Although the above workflow could be valid for all the Bioinformatics libraries, in BioSmalltalk you have probably the most powerfull tools to explore a system through targeted navigation. This is a big change if you are too used to scripting and sweeping raw textual files.
 
!!! Sequences

A biological sequence is a single, continuous molecule of nucleic acid or protein, and represents a naturally occurring, or experimentally generated, fragment of genetic or protein material or any intermediate product (like the messenger RNA). It is possibly the most important object in bioinformatics and most bioinformatics workflows involve using sequences at some point. 

In BioSmalltalk sequences are represented with ""BioSequence"" object. We will talk about representation later. If you have previous programming experience, a sequence is essentialy a ""String"" object with an alphabet. It is read-only, if you want to modify a sequence in place you may use ""BioMutableSeq"". 

"Creating a DNA sequence"
[[[
BioSequence newDNA: 'atcggtcggctta'.
]]]

The above one-liner creates a "BioSequence instance". Nucleotide letters are case-insensitive, this is, meaning does not change based on differing use of uppercase and lowercase letters. When the alphabet information of a sequence is missing (as in this case, or when reading sequences from FASTA files), ""BioSequence"" will try to guess the alphabet type. Notice you can also create a sequence specifying the alphabet, for example:

[[[
BioSequence newAmbiguousDNA:'AAGTCAGTGTACTATTAGCATGCATGTGCAACACATTAGCTG'.
BioSequence newUnambiguousDNA:'AAGTCAGTGTACTATTAGCATGCATGTGCAACACATTAGCTG'.
]]]

Similarily, to create a RNA and Protein sequence, you may use:

[[[
BioSequence newRNA: 'auugccuacauaggc'.
BioSequence newProtein: 'AGFAVENDSA'.
]]]

"Please note: Next to the following expressions, between quotations, is displayed the result of the "Print it" (or "Show it" depending the Smalltalk flavor you are using) operation"

The format of the ""BioSequence"" printString is: 

[[[
"
aBioSequence( sequence_size ) ([ letters_in_alphabet ] alphabet_class) [sequence_letters]
"
]]]

An easier way to create sequences, without specifying the ""BioSequence"" class, is converting a ""String"" into a Sequence object. The following expressions display the contents of the #asSequence message.


[[[
'ATGCTAGN' asSequence.  " a BioSequence(8) ([GATCN] IUPAC DNA) [ATGCTAGN] "

'RSWAFFGH' asSequence.  " a BioSequence(8) ([ACDEFGHIKLMNPQRSTVWY] IUPAC -> Protein) [RSWAFFGH] "

'AGCUCGGCU' asSequence. " a BioSequence(9) ([GAUCRYWSMKHBVDN] IUPAC -> RNA -> Ambiguous) [AGCUCGGCU] "

'VPFSNATGVVRSPFEYPQYYLAE' asSequence 
" a BioSequence(23) ([ACDEFGHIKLMNPQRSTVWY] IUPAC -> Protein) [VPFSNATGVVRSPFEYPQYYLAE] "
]]]



!!! Mutable Sequences

A biological mutable sequence is like a normal sequence, but it is editable, i.e. not read-only. 

Take note that Smalltalk, as in R, index starts counting from 1. One of the benefits of 1-based system is a more human-centered thinking, rather than 0-based counting which are more machine centered. The following script modifies the first position in a RNA sequence: 

[[[
(BioMutableSeq newRNA: 'auugccuacauaggc') 
        at: 1 put: $g;
        yourself. 
" a BioMutableSeq(15) ([GAUC] IUPAC -> RNA -> Unambiguous) [guugccuacauaggc] "
]]]

You may completely replace the sequence if appropriate, this could be convenient for preserving additional information (annotations like sequence features) still valid for the new sequence.

[[[X
(BioMutableSeq newUnambiguousDNA: 'ATGC')
        seq: 'CGTA';
        yourself. 
]]]



!!! Operations on Sequences

The following subsections describes available operations on sequences.

!!!! Basic Operations

Accessing a subsequence and display it as a ""String"":

[[[
((BioSequence newDNA: 'atcggtcggctta') copyFrom: 3 to: 5) asString.  " --> 'cgg' "
]]]

Count the number of bases of a sequence:

[[[
(BioSequence newUnambiguousDNA:'AAGTCAGTGTACTATTAGCATGGCTG') size.
 " --> 26 "
]]]

Get the molecular weight (MW) of a sequence: 

[[[
'AGTACACTGGT' asSequence molecularWeightNonDegen  " --> 3435.23"
]]]

Get the GC nucleotide content:

[[[
'AGTACACTGGT' asSequence gc.
]]]


!!!! Sequence complement

[[[
(BioSequence newDNA: 'AAGTCAGTGTACTATTAGCATGCATGTGCAACACATTAGCTG') complement

" a BioSequence(42) ([GATCN] IUPAC DNA) [TTCAGTCACATGATAATCGTACGTACACGTTGTGTAATCGAC] "
]]]

!!!! Reverse complement

This message answers a copy of the receiver's sequence complemented and with element order reversed. You may need to work with the reverse complement of a sequence if it contains an ORF on the reverse strand. 

Upper and lower case are preserved as can be used to mark regions of interest. Spaces and special letters (like '-' and spaces) are left untouched. 

[[[
(BioSequence newAmbiguousDNA: 'AcTG C-NH' ) reverseComplement.
" a BioSequence(9) ([ACGTWSMKRYBDHVN] IUPAC DNA -> Ambiguous) [DN-G CAgT] "
]]]

Ambiguous and unambiguous nucleotide sequences are supported

[[[
(BioSequence newUnambiguousDNA: 'GGGGaaaaaaaatttatatat') reverseComplement
" a BioSequence(21) ([GATCN] IUPAC DNA) [ATATATAAATTTTTTTTCCCC] "
]]]

Supports BioSequence and BioMutableSeq

[[[
(BioMutableSeq newDNA: 'AAGTCAGTGTACTATTAGCATGCATGTGCAACACATTAGCTG') reverseComplement

" a BioMutableSeq(42) ([GATCN] IUPAC DNA) [CAGCTAATGTGTTGCACATGCATGCTAATAGTACACTGACTT] "
]]]

In the answered sequence, the alphabet is preserved.

[[[
| mySeq |
mySeq := BioSequence newDNA: 'AAGTCAGTGTACTATTAGCATGCATGTGCAACACATTAGCTG'.
mySeq alphabet = mySeq reverseComplement alphabet
]]]

!!!! Transcription and back transcription 

Sequence transcription is a cellular process which firstly reads a DNA gene, producing what is known as "primary transcript" represented by an equivalent RNA sequence (a mRNA precursor). As a second step, a subprocess named "splicing" or "intron splicing" removes the introns from the mRNA precursor and produces the final product: a messenger RNA or mRNA.

!!!! Sequence translation

Translation of RNA is another cellular process which could determine the codons of a mRNA segment, and could be performed in BioSmalltalk with a one-liner:

[[[
(BioSequence newRNA: 'AUGGCCAUUGUAAUGGGCCGCUGAAAGGGUGCCCGAUAG' ) translate. 
" a BioSequence(13) ([ACDEFGHIKLMNPQRSTVWY] IUPAC -> Protein) [MAIVMGR*KGAR*] "
]]]

the same could be achieved stopping at the first stop codon: 

[[[
(BioSequence newRNA: 'AUGGCCAUUGUAAUGGGCCGCUGAAAGGGUGCCCGAUAG' ) translateToStop
" a BioSequence(7) ([ACDEFGHIKLMNPQRSTVWY] IUPAC -> Protein) [MAIVMGR]"
]]]

Translate and concatenate a DNA sequence to Protein sequence: 

[[[
| dna protein |
dna := BioSequence newDNA: 'atcggtcggctta'.
protein := BioSequence newProtein: 'AGFAVENDSA'.
protein , dna translate.
]]]

It is possible to specify the translation table to use alternative genetic codes, according to the [NCBI Genetic Codes](http://www.ncbi.nlm.nih.gov/Taxonomy/Utils/wprintgc.cgi) tables (check the transl_table identifier):

[[[
(BioSequence newRNA: 'AUGGCCAUUGUAAUGGGCCGCUGAAAGGGUGCCCGAUAG' ) translateWithTableId: 2.
" a BioSequence(13) ([ACDEFGHIKLMNPQRSTVWY] IUPAC -> Protein) [MAIVMGRWKGAR*]"
]]]

Warning: After you select another translation table, the selection remains until you otherwise specify other table. To see which table is currently selected evaluate: 

[[[
BioCodonTables currentCodonTable 
]]]

which in our last example should answer: 

[[[
 " a BioCodonTable [2] a Dictionary('AAA'->'K' 'AAC'->'N' 'AAG'->'K' 'AAU'->'N' 'ACA'->'T' 'ACC'->'T' 'ACG'->'T' 'ACU'->'T' 'AGC'->'S' 'AGU'->'S' 'AUA'->'M' 'AUC'->'I' 'AUG'->'M' 'AUU'->'I' 'CAA'->'Q' 'CAC'->'H' 'CAG'->'Q' 'CAU'->'H' 'CCA'->'P' 'CCC'->'P' 'CCG'->'P' 'CCU'->'P' 'CGA'->'R' 'CGC'->'R' 'CGG'->'R' 'CGU'->'R' 'CUA'->'L' 'CUC'->'L' 'CUG'->'L' 'CUU'->'L' 'GAA'->'E' 'GAC'->'D' 'GAG'->'E' 'GAU'->'D' 'GCA'->'A' 'GCC'->'A' 'GCG'->'A' 'GCU'->'A' 'GGA'->'G' 'GGC'->'G' 'GGG'->'G' 'GGU'->'G' 'GUA'->'V' 'GUC'->'V' 'GUG'->'V' 'GUU'->'V' 'UAC'->'Y' 'UAU'->'Y' 'UCA'->'S' 'UCC'->'S' 'UCG'->'S' 'UCU'->'S' 'UGA'->'W' 'UGC'->'C' 'UGG'->'W' 'UGU'->'C' 'UUA'->'L' 'UUC'->'F' 'UUG'->'L' 'UUU'->'F' ) "
]]]

To set the default codon table, evaluate: 

[[[
BioCodonTables currentCodonTable: BioCodonTables defaultCodonTable 
]]]



!!!Alphabets

!!!! International Union of Pure and Applied Chemistry (IUPAC)

IUPAC is one of the many non-governmental organizations composing the International Council for Science. In practice, for the bioinformatician, serves as a "standard" for the naming of the chemical elements and compounds.

Amongst other nomenclatures, in bioinformatics the "IUPAC codes" usually identify amino acids and nucleotide bases. These codes can consist of either one letter code or a three letter code. For example DNA letters are A, G, C, T bases, which compose the DNA Alphabet. Alphabets are used to determine the contents of a sequence, because simple String(s) are not enough. Consider the following sequence: 

[[[ 
'GTCG'
]]]

it could be interpreted as:

- A DNA fragment of Guanine,Thymine,Cytosine and Guanine.
- A Peptide with Glycine, Threonine, Cysteine and Glycine. 

the solution is to disambiguate specifying the correct Alphabet objects when appropriate. 

Alphabets classes are located under the ""BioAlphabet"" class hierarchy. To access the ambiguous alphabets just ask to the IUPAC albhabet abstract class: 

[[[ 
BioIUPACAlphabet ambiguousAlphabets. --> an OrderedCollection(BioIUPACAmbiguousRNA BioIUPACAmbiguousDNA)
]]]

The following script displays the alphabet letters available in the IUPAC specific classes:

[[[
BioIUPACAmbiguousDNA codes --> ACGTWSMKRYBDHVN
BioIUPACAmbiguousRNA codes --> GAUCRYWSMKHBVDN
BioIUPACAmbiguousDNA ambiguityCodes --> WSMKRYBDHVN
BioIUPACAmbiguousRNA ambiguityCodes --> RYWSMKHBVDN
BioIUPACUnambiguousDNA codes --> GATCN
BioIUPACUnambiguousRNA codes --> GAUC
BioIUPACDNAExtended codes --> GATCBDSW
BioIUPACProtein codes --> ACDEFGHIKLMNPQRSTVWY
BioIUPACProteinExtended codes --> ACDEFGHIKLMNPQRSTVWYBXZJUO
BioNullAlphabet codes --> -
]]]

Notice however the IUPAC encoding lacks of symbols for termination, gap (`-`), or selenocysteine.

Create and display sequence objects guessing the alphabet:

[[[
| sequence |
sequence := 'atcggtcggctta' asSequence.
sequence alphabet.

sequence := 'gccuacau' asSequence.
sequence alphabet.
]]]