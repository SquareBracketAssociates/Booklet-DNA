!! Parsing
@cha:parsing

!!! Introduction

Parsing is one of the most important part of developing software in Bioinformatics. Parsing is a process by which a developer makes sense of a sentence (acting as input data, usually a ==String==), usually by breaking it down into letters or words. 

A parser is an object that scans an input ==String==, decomposes it into its constituent parts (which you may define), and then optionally processes the parts in some suitable manner. 

Programming literature usually refer to writing a parser "by hand" when you write a parser without any support programming library. Currently taking such approach is rare and not recommended (because keeping track of contingencies caused by different inputs and input paths is extremely difficult), so developers usually use a parser generator, i.e. a software library, and write rules for such generator.

!!! XML parsing modes

One of the major file formats in Bioinformatics is XML. XML is a widely supported machine-friendly format much easier to parse than the error-prone processing of hardly structured ASCII format (intended for human reading). Also, another huge advantage of XML is that it constitutes a stack or building block upon which other related technologies has been developed such as XSLT, XML Schema, DocBook, XQuery, XPath, XQL, XPHIL, and others.

Under the XML core building block, there are several types of parsers used against a XML formatted file:

- Tree Parser: This is what you will read everywhere as the "DOM parser"
- Event Parser: This is denoted by StAX or SAX and could be
-- SAX Parser: Known as the "Push parser".
-- StAX Parser: Known also too as the "Pull parser".
- VTD Parser : This is known as "Virtual Token Descriptor".

Note: as far as I know currently there is no VTD parser for Smalltalk. This is the most usual classification of XML Parsers:

There are several other classifications depending of the parser characteristics and what you want to do or how. You may be interested in making modifications or just processing, for which the following classification would make more sense:

- For modifications: The parser creates long-lived representations from the XML document (necessary for modifications): You should choose DOM or VTD
-- Do you "need" to query or modify the objects (parser creates nodes): DOM
-- You do not need the objects (parser creates integers and locations caches): VTD
- For processing: The parser doesn't creates long-lived objects: SAX or StAX.

or, if you are interested in the type of access to XML nodes, the following "taxonomy" could serve:

- Back-and-forth: Access the data after the parsing is complete: DOM or VTD
- Massive or very frequent access: Choose DOM
- Rare or simple access: Choose VTD
- Sequential: Access the data while you're processing the document: SAX or StAX
- Processing all tokens: SAX
- Processing interested tokens (allows skipping forward): StAX

!!! Parsing in BioSmalltalk

BioSmalltalk uses different libraries to simplify and enable parsing of the many formats out there in the Bioinformatics arena. The libraries used are:

- Support for parsing XML format in DOM or SAX mode.
- XMLPullParser for parsing XML in StAX mode.
- PetitParser for parsing formatted or structured text. 

!!!! Parsing Sequences

For example, finding if a given ==String==, like 'TCGTACGA', is actually a DNA sequence you just evaluate:

[[[ 
#dnaSequence asParser matches: 'TCGTACGA'.  --> true
#dnaSequence asParser matches: 'TCGTZZZACGA'.  --> false
]]]

And for parsing:

[[[ 
#dnaSequence asParser parse: 'TCGTACGA'. --> 'TCGTACGA'
#dnaSequence asParser parse: 'TCGTA3344CGA'. --> end of input expected at 5
]]]

The #asParser method actually instantiates a parser, which is then sent the message #matches: to test the given input.

Another common way to use the existing parsers is through the ==BioParser class==. In BioSmalltalk we have two modes of parsing: Tokenize and Parse. The tokenize messages always answer a Collection-like object containing other collections or primitive Smalltalk objects (this is, something like #('object1' 'object2') or 1234, 74.32, true, etc.), while the parse messages answer ==BioObject=='s. 

- If you need to keep working with the resulting bio-objects from your parsing (or learn relationships between BioObjects), you may want BioObjects.
- If you want "cheap" (so-called primitive objects), you may work with primitive Smalltalk objects like ==Integers== or ==Strings== 

!!!! Parsing Accession Numbers

An accession number is a unique sequential number assigned to each record (sequence) in a repository. This number allows for tracking of different versions of a sequence record and the associated sequence over time. Parsing an accession number answers a very simple object which you may use to store or index separatedly from its sequence, thus, reducing storage space and processing time. 

Parse an accession number:
[[[ 
BioParser parseAccession: 'CAF97855.1' -->  a BioAccession CAF97855 1
]]]

You may also query if the accession number is versioned:
[[[ 
(BioParser parseAccession: 'CAF97855.1') isVersioned --> true
]]]

And query the version number:
[[[ 
(BioParser parseAccession: 'CAF97855.1') version --> '1'
]]]

Another shortcut for the same message is #asAccession
[[[ 
'XP_425521.2' asAccession version --> '2'
]]]

!!!! Parsing FASTA files

Parse a FASTA file with multiple sequences:
[[[ 
BioParser parseMultiFasta: (BioFASTAFile on: 'my_sequencesHM.fasta') contents.
]]]

Given a header, split its identifiers: 
[[[ 
BioParser tokenizeFastaHeader: '>gi|198282148|ref|NC_011206.1| Acidithiobacillus ferrooxidans ATCC 53993 chromosome, complete genome'.

"  #('>gi' '198282148' 'ref' 'NC_011206.1' 'Acidithiobacillus ferrooxidans ATCC 53993 chromosome, complete genome') "
]]]

Print in the Transcript each sequence description with its sequence size from a FASTA String: 
[[[ 
| fastaString |

fastaString := '>gi|2765658|emb|Z78533.1|CIZ78533 C.irapeanum 5.8S rRNA gene and ITS1 and ITS2 DNA
CGTAACAAGGTTTCCGTAGGTGAACCTGCGGAAGGATCATTGATGAGACCGTGGAATAAACGATCGAGTG
AATCCGGAGGACCGGTGTACTCAGCTCACCGGGGGCATTGCTCCCGTGGTGACCCTGATTTGTTGTTGGG
CCGCCTCGGGAGCGTCCATGGCGGGTTTGAACCTCTAGCCCGGCGCAGTTTGGGCGCCAAGCCATATGAA
AGCATCACCGGCGAATGGCATTGTCTTCCCCAAAACCCGGAGCGGCGGCGTGCTGTCGCGTGCCCAATGA
ATTTTGATGACTCTCGCAAACGGGAATCTTGGCTCTTTGCATCGGATGGAAGGACGCAGCGAAATGCGAT
AAGTGGTGTGAATTGCAAGATCCCGTGAACCATCGAGTCTTTTGAACGCAAGTTGCGCCCGAGGCCATCA
GGCTAAGGGCACGCCTGCTTGGGCGTCGCGCTTCGTCTCTCTCCTGCCAATGCTTGCCCGGCATACAGCC
AGGCCGGCGTGGTGCGGATGTGAAAGATTGGCCCCTTGTGCCTAGGTGCGGCGGGTCCAAGAGCTGGTGT
TTTGATGGCCCGGAACCCGGCAAGAGGTGGACGGATGCTGGCAGCAGCTGCCGTGCGAATCCCCCATGTT
GTCGTGCTTGTCGGACAGGCAGGAGAACCCTTCCGAACCCCAATGGAGGGCGGTTGACCGCCATTCGGAT
GTGACCCCAGGTCAGGCGGGGGCACCCGCTGAGTTTACGC

>gi|2765657|emb|Z78532.1|CCZ78532 C.californicum 5.8S rRNA gene and ITS1 and ITS2 DNA
CGTAACAAGGTTTCCGTAGGTGAACCTGCGGAAGGATCATTGTTGAGACAACAGAATATATGATCGAGTG
AATCTGGAGGACCTGTGGTAACTCAGCTCGTCGTGGCACTGCTTTTGTCGTGACCCTGCTTTGTTGTTGG
GCCTCCTCAAGAGCTTTCATGGCAGGTTTGAACTTTAGTACGGTGCAGTTTGCGCCAAGTCATATAAAGC
ATCACTGATGAATGACATTATTGTCAGAAAAAATCAGAGGGGCAGTATGCTACTGAGCATGCCAGTGAAT
TTTTATGACTCTCGCAACGGATATCTTGGCTCTAACATCGATGAAGAACGCAGCTAAATGCGATAAGTGG
TGTGAATTGCAGAATCCCGTGAACCATCGAGTCTTTGAACGCAAGTTGCGCTCGAGGCCATCAGGCTAAG
GGCACGCCTGCCTGGGCGTCGTGTGTTGCGTCTCTCCTACCAATGCTTGCTTGGCATATCGCTAAGCTGG
CATTATACGGATGTGAATGATTGGCCCCTTGTGCCTAGGTGCGGTGGGTCTAAGGATTGTTGCTTTGATG
GGTAGGAATGTGGCACGAGGTGGAGAATGCTAACAGTCATAAGGCTGCTATTTGAATCCCCCATGTTGTT
GTATTTTTTCGAACCTACACAAGAACCTAATTGAACCCCAATGGAGCTAAAATAACCATTGGGCAGTTGA
TTTCCATTCAGATGCGACCCCAGGTCAGGCGGGGCCACCCGCTGAGTTGAGGC
'.

(BioParser parseMultiFasta: fastaString) do: [ : seqRecord |
                Transcript
                        show: seqRecord name; cr;
                        show: seqRecord size; cr; cr ]
]]]
